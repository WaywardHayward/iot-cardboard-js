import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import typescript from 'rollup-plugin-typescript2';
import postcss from 'rollup-plugin-postcss';
import postcssUrl from 'postcss-url';
import json from '@rollup/plugin-json';
import eslint from '@rollup/plugin-eslint';
import renameNodeModules from 'rollup-plugin-rename-node-modules';
import replace from '@rollup/plugin-replace';

export default {
    input: 'src/index.ts',
    output: [
        {
            dir: 'dist',
            format: 'esm',
            sourcemap: false,
            preserveModules: true,
            preserveModulesRoot: 'src'
        }
    ],
    plugins: [
        peerDepsExternal(),
        resolve(),
        commonjs(),
        eslint({
            throwOnError: true
        }),
        typescript({ useTsconfigDeclarationDir: true }),
        postcss({
            plugins: [
                postcssUrl({
                    url: 'inline'
                })
            ]
        }),
        json(),
        // Custom plugin to fix style-inject references https://github.com/egoist/rollup-plugin-postcss/issues/381#issuecomment-880771065
        {
            name: 'style-inject fix pass`',

            generateBundle: (options, bundle) => {
                Object.entries(bundle).forEach((entry) => {
                    // early return if the file we're currently looking at doesn't need to be acted upon by this plugin
                    if (!entry[0].match(/.*(.s?css.js)$/)) {
                        return;
                    }

                    // this line only runs for .scss.js files, which were generated by the postcss plugin.
                    // depending on the use-case, the relative path to style-inject might need to change
                    bundle[entry[0]].code = entry[1].code.replace(
                        '../../external/style-inject/dist/style-inject.es.js',
                        'style-inject'
                    );
                });
            }
        },
        // Rename bundled node_module references to 'external'
        renameNodeModules('external', false),
        replace({
            node_modules: 'external'
        })
    ]
};
